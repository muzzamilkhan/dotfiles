{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nx-console/./apps/nxls/src|sync","webpack://nx-console/./apps/nxls/src/global-polyfills.ts","webpack://nx-console/./libs/collections/src/lib/get-executors.ts","webpack://nx-console/./libs/collections/src/lib/read-collections.ts","webpack://nx-console/./libs/file-system/src/lib/cache-json.ts","webpack://nx-console/./libs/file-system/src/lib/directory-exists.ts","webpack://nx-console/./libs/file-system/src/lib/file-exists.ts","webpack://nx-console/./libs/file-system/src/lib/read-file.ts","webpack://nx-console/./libs/json-schema/src/index.ts","webpack://nx-console/./libs/json-schema/src/lib/completion-type.ts","webpack://nx-console/./libs/json-schema/src/lib/create-builders-and-executors-schema.ts","webpack://nx-console/./libs/json-schema/src/lib/project-json-schema.ts","webpack://nx-console/./libs/json-schema/src/lib/workspace-json-schema.ts","webpack://nx-console/./libs/language-server/capabilities/code-completion/src/lib/create-completion-path-item.ts","webpack://nx-console/./libs/language-server/capabilities/code-completion/src/lib/get-completion-items.ts","webpack://nx-console/./libs/language-server/capabilities/code-completion/src/lib/path-completion.ts","webpack://nx-console/./libs/language-server/capabilities/code-completion/src/lib/target-completion.ts","webpack://nx-console/./libs/language-server/capabilities/document-links/src/lib/create-range.ts","webpack://nx-console/./libs/language-server/capabilities/document-links/src/lib/get-document-links.ts","webpack://nx-console/./libs/language-server/capabilities/document-links/src/lib/target-link.ts","webpack://nx-console/./libs/language-server/utils/src/lib/default-completion.ts","webpack://nx-console/./libs/language-server/utils/src/lib/find-project-root.ts","webpack://nx-console/./libs/language-server/utils/src/lib/find-property.ts","webpack://nx-console/./libs/language-server/utils/src/lib/json-language-service.ts","webpack://nx-console/./libs/language-server/utils/src/lib/language-model-cache.ts","webpack://nx-console/./libs/language-server/utils/src/lib/lsp-log.ts","webpack://nx-console/./libs/language-server/utils/src/lib/merge-arrays.ts","webpack://nx-console/./libs/language-server/utils/src/lib/node-types.ts","webpack://nx-console/./libs/language-server/utils/src/lib/runtime.ts","webpack://nx-console/./libs/npm/src/index.ts","webpack://nx-console/./libs/npm/src/lib/find-nx-package-path.ts","webpack://nx-console/./libs/npm/src/lib/ng-version.ts","webpack://nx-console/./libs/npm/src/lib/npm-dependencies.ts","webpack://nx-console/./libs/npm/src/lib/nx-version.ts","webpack://nx-console/./libs/npm/src/lib/package-details.ts","webpack://nx-console/./libs/npm/src/lib/pnp-dependencies.ts","webpack://nx-console/./libs/npm/src/lib/workspace-dependencies.ts","webpack://nx-console/./libs/schema/src/index.ts","webpack://nx-console/./libs/utils/src/index.ts","webpack://nx-console/./libs/utils/src/lib/build-project-path.ts","webpack://nx-console/./libs/utils/src/lib/check-is-nx-workspace.ts","webpack://nx-console/./libs/utils/src/lib/find-config.ts","webpack://nx-console/./libs/utils/src/lib/utils.ts","webpack://nx-console/./libs/workspace/src/lib/get-nx-workspace-config.ts","webpack://nx-console/./libs/workspace/src/lib/get-nx-workspace-package.ts","webpack://nx-console/./libs/workspace/src/lib/workspace.ts","webpack://nx-console/external commonjs \"@nrwl/devkit/src/executors/parse-target-string\"","webpack://nx-console/external commonjs \"@yarnpkg/fslib\"","webpack://nx-console/external commonjs \"@yarnpkg/libzip\"","webpack://nx-console/external commonjs \"fast-glob\"","webpack://nx-console/external commonjs \"jsonc-parser\"","webpack://nx-console/external commonjs \"nx/src/config/workspaces\"","webpack://nx-console/external commonjs \"nx/src/project-graph/file-utils\"","webpack://nx-console/external commonjs \"nx/src/project-graph/project-graph\"","webpack://nx-console/external commonjs \"request-light\"","webpack://nx-console/external commonjs \"rxjs\"","webpack://nx-console/external commonjs \"vscode-json-languageservice\"","webpack://nx-console/external commonjs \"vscode-languageserver-textdocument\"","webpack://nx-console/external commonjs \"vscode-languageserver/node\"","webpack://nx-console/external commonjs \"vscode-uri\"","webpack://nx-console/external node-commonjs \"fs\"","webpack://nx-console/external node-commonjs \"fs/promises\"","webpack://nx-console/external node-commonjs \"os\"","webpack://nx-console/external node-commonjs \"path\"","webpack://nx-console/webpack/bootstrap","webpack://nx-console/webpack/runtime/compat get default export","webpack://nx-console/webpack/runtime/create fake namespace object","webpack://nx-console/webpack/runtime/define property getters","webpack://nx-console/webpack/runtime/hasOwnProperty shorthand","webpack://nx-console/webpack/runtime/make namespace object","webpack://nx-console/./apps/nxls/src/main.ts"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./apps/nxls/src sync recursive\";\nmodule.exports = webpackEmptyContext;","/* eslint-disable */\n\n// needed for rollup builds because one of the dependent libraries have a non_webpack_require (essentially the nx package resolve util)\ndeclare var __non_webpack_require__: typeof require;\nif (!globalThis.__non_webpack_require__) {\n  globalThis.__non_webpack_require__ = require;\n}\n","import { CollectionInfo, WorkspaceProjects } from '@nx-console/schema';\nimport { readCollections } from './read-collections';\n\nexport async function getExecutors(\n  workspacePath: string,\n  projects: WorkspaceProjects,\n  clearPackageJsonCache: boolean\n): Promise<CollectionInfo[]> {\n  return (\n    await readCollections(workspacePath, { projects, clearPackageJsonCache })\n  ).filter((collection) => collection.type === 'executor');\n}\n","import {\n  workspaceDependencies,\n  workspaceDependencyPath,\n  packageDetails,\n} from '@nx-console/npm';\nimport {\n  CollectionInfo,\n  Generator,\n  GeneratorType,\n  WorkspaceProjects,\n} from '@nx-console/schema';\nimport { platform } from 'os';\nimport { dirname, join, resolve } from 'path';\nimport { clearJsonCache, readAndCacheJsonFile } from '@nx-console/file-system';\n\nexport async function readCollections(\n  workspacePath: string,\n  options: {\n    projects?: WorkspaceProjects;\n    clearPackageJsonCache?: boolean;\n  }\n): Promise<CollectionInfo[]> {\n  if (options?.clearPackageJsonCache) {\n    clearJsonCache('package.json', workspacePath);\n  }\n\n  const packages = await workspaceDependencies(workspacePath, options.projects);\n\n  const collections = await Promise.all(\n    packages.map(async (p) => {\n      return await packageDetails(p);\n    })\n  );\n\n  const allCollections = (\n    await Promise.all(collections.map((c) => readCollection(workspacePath, c)))\n  ).flat();\n\n  /**\n   * Since we gather all collections, and collections listed in `extends`, we need to dedupe collections here if workspaces have that extended collection in their own package.json\n   */\n  const dedupedCollections = new Map<string, CollectionInfo>();\n  for (const singleCollection of allCollections) {\n    if (!singleCollection) {\n      continue;\n    }\n\n    if (\n      !dedupedCollections.has(\n        collectionNameWithType(singleCollection.name, singleCollection.type)\n      )\n    ) {\n      dedupedCollections.set(\n        collectionNameWithType(singleCollection.name, singleCollection.type),\n        singleCollection\n      );\n    }\n  }\n\n  return Array.from(dedupedCollections.values());\n}\n\nasync function readCollection(\n  workspacePath: string,\n  {\n    packagePath,\n    packageName,\n    packageJson: json,\n  }: {\n    packagePath: string;\n    packageName: string;\n    packageJson: any;\n  }\n): Promise<CollectionInfo[] | null> {\n  try {\n    const [executorCollections, generatorCollections] = await Promise.all([\n      readAndCacheJsonFile(json.executors || json.builders, packagePath),\n      readAndCacheJsonFile(json.generators || json.schematics, packagePath),\n    ]);\n\n    return getCollectionInfo(\n      workspacePath,\n      packageName,\n      packagePath,\n      executorCollections,\n      generatorCollections\n    );\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getCollectionInfo(\n  workspacePath: string,\n  collectionName: string,\n  collectionPath: string,\n  executorCollection: { path: string; json: any },\n  generatorCollection: { path: string; json: any }\n): Promise<CollectionInfo[]> {\n  const collectionMap: Map<string, CollectionInfo> = new Map();\n\n  const buildCollectionInfo = (\n    name: string,\n    value: any,\n    type: 'executor' | 'generator',\n    schemaPath: string\n  ): CollectionInfo => {\n    let path = resolve(collectionPath, dirname(schemaPath), value.schema);\n\n    if (platform() === 'win32') {\n      path = `file:///${path.replace(/\\\\/g, '/')}`;\n    }\n\n    return {\n      name: `${collectionName}:${name}`,\n      type,\n      path,\n    };\n  };\n\n  const executors = {\n    ...executorCollection.json.executors,\n    ...executorCollection.json.builders,\n  };\n  for (const [key, schema] of Object.entries<any>(executors)) {\n    if (!canUse(key, schema)) {\n      continue;\n    }\n    const collectionInfo = buildCollectionInfo(\n      key,\n      schema,\n      'executor',\n      executorCollection.path\n    );\n    if (\n      collectionMap.has(collectionNameWithType(collectionInfo.name, 'executor'))\n    ) {\n      continue;\n    }\n    collectionMap.set(\n      collectionNameWithType(collectionInfo.name, 'executor'),\n      collectionInfo\n    );\n  }\n\n  const generators = {\n    ...generatorCollection.json.generators,\n    ...generatorCollection.json.schematics,\n  };\n  for (const [key, schema] of Object.entries<any>(generators)) {\n    if (!canUse(key, schema)) {\n      continue;\n    }\n\n    try {\n      const collectionInfo = buildCollectionInfo(\n        key,\n        schema,\n        'generator',\n        generatorCollection.path\n      );\n      collectionInfo.data = readCollectionGenerator(\n        collectionName,\n        key,\n        schema\n      );\n      if (\n        collectionMap.has(\n          collectionNameWithType(collectionInfo.name, 'generator')\n        )\n      ) {\n        continue;\n      }\n      collectionMap.set(\n        collectionNameWithType(collectionInfo.name, 'generator'),\n        collectionInfo\n      );\n    } catch (e) {\n      // noop - generator is invalid\n    }\n  }\n\n  if (\n    generatorCollection.json.extends &&\n    Array.isArray(generatorCollection.json.extends)\n  ) {\n    const extendedSchema = generatorCollection.json.extends as string[];\n    const extendedCollections = (\n      await Promise.all(\n        extendedSchema\n          .filter((extended) => extended !== '@nrwl/workspace')\n          .map(async (extended: string) => {\n            const dependencyPath = await workspaceDependencyPath(\n              workspacePath,\n              extended\n            );\n\n            if (!dependencyPath) {\n              return null;\n            }\n\n            return readCollection(\n              workspacePath,\n              await packageDetails(dependencyPath)\n            );\n          })\n      )\n    )\n      .flat()\n      .filter((c): c is CollectionInfo => Boolean(c));\n\n    for (const collection of extendedCollections) {\n      if (collectionMap.has(collection.name)) {\n        continue;\n      }\n\n      collectionMap.set(collection.name, collection);\n    }\n  }\n\n  return Array.from(collectionMap.values());\n}\n\nfunction readCollectionGenerator(\n  collectionName: string,\n  collectionSchemaName: string,\n  collectionJson: any\n): Generator | undefined {\n  try {\n    let generatorType: GeneratorType;\n    switch (collectionJson['x-type']) {\n      case 'application':\n        generatorType = GeneratorType.Application;\n        break;\n      case 'library':\n        generatorType = GeneratorType.Library;\n        break;\n      default:\n        generatorType = GeneratorType.Other;\n        break;\n    }\n    return {\n      name: collectionSchemaName,\n      collection: collectionName,\n      description: collectionJson.description || '',\n      type: generatorType,\n    };\n  } catch (e) {\n    console.error(e);\n    console.error(\n      `Invalid package.json for schematic ${collectionName}:${collectionSchemaName}`\n    );\n  }\n}\n\n/**\n * Checks to see if the collection is usable within Nx Console.\n * @param name\n * @param s\n * @returns\n */\nfunction canUse(\n  name: string,\n  s: { hidden: boolean; private: boolean; schema: string; extends: boolean }\n): boolean {\n  return !s.hidden && !s.private && !s.extends && name !== 'ng-add';\n}\n\nfunction collectionNameWithType(name: string, type: 'generator' | 'executor') {\n  return `${name}-${type}`;\n}\n","import * as path from 'path';\nimport { PosixFS, ZipOpenFS } from '@yarnpkg/fslib';\nimport { getLibzipSync as libzip } from '@yarnpkg/libzip';\n\nimport { parse as parseJson, ParseError } from 'jsonc-parser';\n\nconst zipOpenFs = new ZipOpenFS({ libzip });\nexport const crossFs = new PosixFS(zipOpenFs);\nexport const files: { [path: string]: string[] } = {};\nexport const fileContents: { [path: string]: any } = {};\n\nexport async function readAndParseJson(filePath: string) {\n  const content = await crossFs.readFilePromise(filePath, 'utf8');\n  try {\n    return JSON.parse(content);\n  } catch {\n    const errors: ParseError[] = [];\n    const result = parseJson(content, errors);\n\n    if (errors.length > 0) {\n      for (const { error, offset } of errors) {\n        // TODO(cammisuli): output this generically\n        // getOutputChannel().appendLine(\n        //   `${printParseErrorCode(\n        //     error\n        //   )} in JSON at position ${offset} in ${filePath}`\n        // );\n      }\n    }\n\n    return result;\n  }\n}\n\nexport function clearJsonCache(filePath: string, basedir = '') {\n  const fullFilePath = path.join(basedir, filePath);\n  return delete fileContents[fullFilePath];\n}\n\nexport async function readAndCacheJsonFile(\n  filePath: string | undefined,\n  basedir = ''\n): Promise<{ path: string; json: any }> {\n  if (!filePath) {\n    return {\n      path: '',\n      json: {},\n    };\n  }\n  let fullFilePath = path.join(basedir, filePath);\n  if (fullFilePath.startsWith('file:\\\\')) {\n    fullFilePath = fullFilePath.replace('file:\\\\', '');\n  }\n  try {\n    const stats = await crossFs.statPromise(fullFilePath);\n    if (fileContents[fullFilePath] || stats.isFile()) {\n      fileContents[fullFilePath] ||= await readAndParseJson(fullFilePath);\n      return {\n        path: fullFilePath,\n        json: fileContents[fullFilePath],\n      };\n    }\n  } catch (e) {\n    // TODO(cammisuli): output this generically\n    // getOutputChannel().appendLine(`${fullFilePath} does not exist`);\n  }\n\n  return {\n    path: fullFilePath,\n    json: {},\n  };\n}\n\n/**\n * Caches already created json contents to a file path\n */\nexport function cacheJson(filePath: string, basedir = '', content?: any) {\n  const fullFilePath = path.join(basedir, filePath);\n  if (fileContents[fullFilePath]) {\n    return {\n      json: fileContents[fullFilePath],\n      path: fullFilePath,\n    };\n  }\n\n  if (content) {\n    fileContents[fullFilePath] = content;\n  }\n  return {\n    json: content,\n    path: fullFilePath,\n  };\n}\n","import { stat } from 'fs/promises';\n\nexport async function directoryExists(filePath: string): Promise<boolean> {\n  try {\n    return (await stat(filePath)).isDirectory();\n  } catch {\n    return false;\n  }\n}\n","import { stat } from 'fs/promises';\n\nexport async function fileExists(filePath: string): Promise<boolean> {\n  try {\n    return (await stat(filePath)).isFile();\n  } catch {\n    return false;\n  }\n}\n","import { crossFs } from './cache-json';\n\nexport async function readFile(filePath: string): Promise<string> {\n  try {\n    return crossFs.readFilePromise(filePath, 'utf8');\n  } catch {\n    return '';\n  }\n}\n","export * from './lib/workspace-json-schema';\nexport * from './lib/project-json-schema';\nexport * from './lib/completion-type';\n","import { hasKey } from '@nx-console/utils';\nimport { JSONSchema } from 'vscode-json-languageservice';\n\nexport const X_COMPLETION_TYPE = 'x-completion-type' as const;\nexport const X_COMPLETION_GLOB = 'x-completion-glob' as const;\n\nexport type CompletionType = 'file' | 'directory' | 'target';\n\nexport function hasCompletionType(\n  schema: JSONSchema\n): schema is JSONSchema & { [X_COMPLETION_TYPE]: CompletionType } {\n  return hasKey(schema, X_COMPLETION_TYPE);\n}\n\nexport function hasCompletionGlob(\n  schema: JSONSchema\n): schema is JSONSchema & { [X_COMPLETION_GLOB]: string } {\n  return hasKey(schema, X_COMPLETION_GLOB);\n}\n","import { CollectionInfo } from '@nx-console/schema';\nimport { JSONSchema } from 'vscode-json-languageservice';\n\ntype BuildersSchema = JSONSchema;\ntype ExecutorsSchema = JSONSchema;\n\n/**\n * Builds the schema for builders and executors.\n *\n * @param collections\n * @returns [BuildersSchema[], ExecutorsSchema[]]\n */\nexport function createBuildersAndExecutorsSchema(\n  collections: CollectionInfo[]\n): [BuildersSchema[], ExecutorsSchema[]] {\n  return collections.reduce<[BuildersSchema[], ExecutorsSchema[]]>(\n    (acc, collection) => {\n      acc[0].push({\n        if: {\n          properties: { builder: { const: collection.name } },\n          required: ['builder'],\n        },\n        then: {\n          properties: {\n            options: {\n              $ref: `file://${collection.path}`,\n            },\n            configurations: {\n              additionalProperties: {\n                $ref: `file://${collection.path}`,\n                required: [],\n              },\n            },\n          },\n        },\n      });\n      acc[1].push({\n        if: {\n          properties: { executor: { const: collection.name } },\n          required: ['executor'],\n        },\n        then: {\n          properties: {\n            options: {\n              $ref: `file://${collection.path}`,\n            },\n            configurations: {\n              additionalProperties: {\n                $ref: `file://${collection.path}`,\n                required: [],\n              },\n            },\n          },\n        },\n      });\n      return acc;\n    },\n    [[], []]\n  );\n}\n","import { CollectionInfo } from '@nx-console/schema';\nimport type { JSONSchema } from 'vscode-json-languageservice';\nimport { createBuildersAndExecutorsSchema } from './create-builders-and-executors-schema';\nimport {\n  CompletionType,\n  X_COMPLETION_GLOB,\n  X_COMPLETION_TYPE,\n} from './completion-type';\n\nexport function getProjectJsonSchema(collections: CollectionInfo[]) {\n  const [, executors] = createBuildersAndExecutorsSchema(collections);\n  const contents = createJsonSchema(executors);\n  return contents;\n}\n\ninterface EnhancedJsonSchema extends JSONSchema {\n  [X_COMPLETION_TYPE]?: CompletionType;\n  [X_COMPLETION_GLOB]?: string;\n}\n\nfunction createJsonSchema(executors: JSONSchema[]): EnhancedJsonSchema {\n  return {\n    type: 'object',\n    properties: {\n      root: {\n        type: 'string',\n        'x-completion-type': 'directory',\n      } as EnhancedJsonSchema,\n      sourceRoot: {\n        type: 'string',\n        'x-completion-type': 'directory',\n      } as EnhancedJsonSchema,\n      targets: {\n        additionalProperties: {\n          type: 'object',\n          properties: {\n            outputs: {\n              type: 'array',\n              items: {\n                type: 'string',\n                'x-completion-type': 'directory',\n              } as EnhancedJsonSchema,\n            },\n            executor: {\n              type: 'string',\n            },\n            configurations: {\n              additionalProperties: {\n                type: 'object',\n              },\n            },\n          },\n          allOf: executors,\n        },\n      },\n    },\n  };\n}\n","import { CollectionInfo } from '@nx-console/schema';\nimport { JSONSchema } from 'vscode-json-languageservice';\nimport { createBuildersAndExecutorsSchema } from './create-builders-and-executors-schema';\n\nexport function getWorkspaceJsonSchema(collections: CollectionInfo[]) {\n  const [builders, executors] = createBuildersAndExecutorsSchema(collections);\n  const contents = createJsonSchema(builders, executors);\n  return contents;\n}\n\nfunction createJsonSchema(\n  builders: JSONSchema[],\n  executors: JSONSchema[]\n): JSONSchema {\n  return {\n    title: 'JSON schema for Nx workspaces',\n    id: 'https://nx.dev',\n    type: 'object',\n    properties: {\n      version: {\n        type: 'number',\n        enum: [1, 2],\n      },\n    },\n    allOf: [\n      {\n        if: {\n          properties: { version: { const: 1 } },\n          required: ['version'],\n        },\n        then: {\n          properties: {\n            projects: {\n              type: 'object',\n              additionalProperties: {\n                type: 'object',\n                properties: {\n                  architect: {\n                    description:\n                      'Configures all the targets which define what tasks you can run against the project',\n                    additionalProperties: {\n                      type: 'object',\n                      properties: {\n                        builder: {\n                          description:\n                            'The function that Nx will invoke when you run this architect',\n                          type: 'string',\n                        },\n                        options: {\n                          type: 'object',\n                        },\n                        configurations: {\n                          description:\n                            'provides extra sets of values that will be merged into the options map',\n                          additionalProperties: {\n                            type: 'object',\n                          },\n                        },\n                      },\n                      allOf: builders,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      {\n        if: {\n          properties: { version: { const: 2 } },\n          required: ['version'],\n        },\n        then: {\n          properties: {\n            projects: {\n              type: 'object',\n              additionalProperties: {\n                oneOf: [\n                  {\n                    type: 'string',\n                  },\n                  {\n                    type: 'object',\n                    properties: {\n                      targets: {\n                        description:\n                          'Configures all the targets which define what tasks you can run against the project',\n                        additionalProperties: {\n                          type: 'object',\n                          properties: {\n                            executor: {\n                              description:\n                                'The function that Nx will invoke when you run this target',\n                              type: 'string',\n                            },\n                            options: {\n                              type: 'object',\n                            },\n                            configurations: {\n                              description:\n                                'provides extra sets of values that will be merged into the options map',\n                              additionalProperties: {\n                                type: 'object',\n                              },\n                            },\n                          },\n                          allOf: executors,\n                        },\n                      },\n                    },\n                  },\n                ],\n              },\n            },\n          },\n        },\n      },\n    ],\n  };\n}\n","import {\n  ASTNode,\n  CompletionItem,\n  CompletionItemKind,\n  TextDocument,\n} from 'vscode-json-languageservice';\n\nexport function createCompletionPathItem(\n  label: string,\n  path: string,\n  node: ASTNode,\n  document: TextDocument,\n  kind: CompletionItemKind\n): CompletionItem {\n  const startPosition = document.positionAt(node.offset);\n  const endPosition = document.positionAt(node.offset + node.length);\n  label = `\"${label}\"`;\n  return {\n    label,\n    kind,\n    insertText: label,\n    insertTextFormat: 2,\n    textEdit: {\n      newText: label,\n      range: {\n        start: startPosition,\n        end: endPosition,\n      },\n    },\n    detail: path,\n  };\n}\n","import {\n  CompletionType,\n  hasCompletionGlob,\n  hasCompletionType,\n  X_COMPLETION_GLOB,\n  X_COMPLETION_TYPE,\n} from '@nx-console/json-schema';\nimport { getDefaultCompletionType } from '@nx-console/language-server/utils';\nimport {\n  ASTNode,\n  CompletionItem,\n  JSONDocument,\n  MatchingSchema,\n  Position,\n  TextDocument,\n} from 'vscode-json-languageservice';\nimport { pathCompletion } from './path-completion';\nimport { targetCompletion } from './target-completion';\n\nexport async function getCompletionItems(\n  workingPath: string | undefined,\n  jsonAst: JSONDocument,\n  document: TextDocument,\n  schemas: MatchingSchema[],\n  position: Position\n): Promise<CompletionItem[]> {\n  if (!workingPath) {\n    return [];\n  }\n\n  const offset = document.offsetAt(position);\n  const node = jsonAst.getNodeFromOffset(offset);\n  if (!node) {\n    return [];\n  }\n\n  const items = completionItems(workingPath, node, document);\n\n  for (const { schema, node: schemaNode } of schemas) {\n    // Find the schema node that matches the current node\n    // If the node is found, then we will return the whole function so that we don't have to loop over the rest of the items.\n    if (schemaNode == node) {\n      if (hasCompletionType(schema)) {\n        const completion = schema[X_COMPLETION_TYPE];\n        if (hasCompletionGlob(schema)) {\n          return items(completion, schema[X_COMPLETION_GLOB]);\n        }\n\n        return items(completion);\n      }\n    }\n  }\n\n  const defaultCompletion = getDefaultCompletionType(node);\n\n  if (defaultCompletion) {\n    return items(defaultCompletion.completionType, defaultCompletion.glob);\n  }\n\n  return [];\n}\n\nfunction completionItems(\n  workingPath: string,\n  node: ASTNode,\n  document: TextDocument\n) {\n  return async (\n    completion: CompletionType,\n    glob?: string\n  ): Promise<CompletionItem[]> => {\n    switch (completion) {\n      case 'file': {\n        return pathCompletion(workingPath, node, document, {\n          glob: glob ?? '*.*',\n          searchType: 'file',\n        });\n      }\n      case 'directory': {\n        return pathCompletion(workingPath, node, document, {\n          glob: glob ?? '*',\n          searchType: 'directory',\n        });\n      }\n      case 'target': {\n        return targetCompletion(workingPath, node, document);\n      }\n      default: {\n        return [];\n      }\n    }\n  };\n}\n","import {\n  findProjectRoot,\n  isStringNode,\n} from '@nx-console/language-server/utils';\nimport fastGlob from 'fast-glob';\nimport {\n  ASTNode,\n  CompletionItem,\n  CompletionItemKind,\n  TextDocument,\n} from 'vscode-json-languageservice';\nimport { createCompletionPathItem } from './create-completion-path-item';\n\nexport async function pathCompletion(\n  workingPath: string | undefined,\n  node: ASTNode,\n  document: TextDocument,\n  options?: {\n    glob: string;\n    searchType: 'file' | 'directory';\n    supportsInterpolation?: boolean;\n  }\n): Promise<CompletionItem[]> {\n  const items: CompletionItem[] = [];\n\n  if (!workingPath) {\n    return items;\n  }\n\n  const { supportsInterpolation, glob, searchType } = {\n    supportsInterpolation: false,\n    ...options,\n  };\n\n  if (!isStringNode(node)) {\n    return items;\n  }\n\n  const projectRoot = findProjectRoot(node);\n\n  const files = await fastGlob([workingPath + '/**/' + glob], {\n    ignore: ['**/node_modules/**'],\n    dot: true,\n    onlyFiles: searchType === 'file',\n    onlyDirectories: searchType === 'directory',\n    objectMode: true,\n  });\n\n  const completionKind =\n    searchType === 'directory'\n      ? CompletionItemKind.Folder\n      : CompletionItemKind.File;\n\n  for (const file of files) {\n    if (\n      supportsInterpolation &&\n      file.path.startsWith(workingPath + '/' + projectRoot)\n    ) {\n      const label =\n        '{projectRoot}' +\n        file.path.replace(workingPath + '/' + projectRoot, '');\n\n      items.push(\n        createCompletionPathItem(\n          label,\n          file.path,\n          node,\n          document,\n          completionKind\n        )\n      );\n    }\n\n    if (file.path.startsWith(workingPath)) {\n      const label = file.path.replace(workingPath + '/', '');\n      items.push(\n        createCompletionPathItem(\n          label,\n          file.path,\n          node,\n          document,\n          completionKind\n        )\n      );\n\n      if (supportsInterpolation) {\n        const label = '{workspaceRoot}' + file.path.replace(workingPath, '');\n        items.push(\n          createCompletionPathItem(\n            label,\n            file.path,\n            node,\n            document,\n            completionKind\n          )\n        );\n      }\n    }\n  }\n\n  return items;\n}\n","import { nxWorkspace } from '@nx-console/workspace';\nimport {\n  ASTNode,\n  CompletionItem,\n  CompletionItemKind,\n  TextDocument,\n} from 'vscode-json-languageservice';\nimport { createCompletionPathItem } from './create-completion-path-item';\n\nexport async function targetCompletion(\n  workingPath: string | undefined,\n  node: ASTNode,\n  document: TextDocument\n): Promise<CompletionItem[]> {\n  if (!workingPath) {\n    return [];\n  }\n\n  const { workspace } = await nxWorkspace(workingPath);\n\n  const targetCompletion: CompletionItem[] = [];\n\n  const completionItemKind = CompletionItemKind.Field;\n\n  for (const [projectName, configuration] of Object.entries(\n    workspace.projects\n  )) {\n    for (const [targetName, target] of Object.entries(\n      configuration.targets ?? {}\n    )) {\n      const targetLabel = `${projectName}:${targetName}`;\n      targetCompletion.push(\n        createCompletionPathItem(\n          targetLabel,\n          '',\n          node,\n          document,\n          completionItemKind\n        )\n      );\n\n      for (const configuration of Object.keys(target.configurations ?? {})) {\n        const configurationLabel = `${targetLabel}:${configuration}`;\n        targetCompletion.push(\n          createCompletionPathItem(\n            configurationLabel,\n            '',\n            node,\n            document,\n            completionItemKind\n          )\n        );\n      }\n    }\n  }\n\n  return targetCompletion;\n}\n","import { ASTNode, Range, TextDocument } from 'vscode-json-languageservice';\n\nexport function createRange(document: TextDocument, node: ASTNode) {\n  const position = document.positionAt(node.offset);\n  const endPosition = document.positionAt(node.offset + node.length);\n  return Range.create(position, endPosition);\n}\n","import { fileExists } from '@nx-console/file-system';\nimport {\n  CompletionType,\n  hasCompletionType,\n  X_COMPLETION_TYPE,\n} from '@nx-console/json-schema';\nimport {\n  findProjectRoot,\n  getDefaultCompletionType,\n  hasDefaultCompletionType,\n  isStringNode,\n} from '@nx-console/language-server/utils';\nimport { join } from 'path';\nimport {\n  DocumentLink,\n  JSONDocument,\n  MatchingSchema,\n  TextDocument,\n} from 'vscode-json-languageservice';\nimport { createRange } from './create-range';\nimport { targetLink } from './target-link';\n\nexport async function getDocumentLinks(\n  workingPath: string | undefined,\n  jsonAst: JSONDocument,\n  document: TextDocument,\n  schemas: MatchingSchema[]\n): Promise<DocumentLink[]> {\n  if (!workingPath) {\n    return [];\n  }\n\n  const links: DocumentLink[] = [];\n\n  if (!jsonAst.root) {\n    return [];\n  }\n\n  const projectRoot = findProjectRoot(jsonAst.root);\n  const projectRootPath = join(workingPath, projectRoot);\n\n  for (const { schema, node } of schemas) {\n    let linkType: CompletionType | undefined;\n    if (hasCompletionType(schema)) {\n      linkType = schema[X_COMPLETION_TYPE];\n    } else if (hasDefaultCompletionType(node)) {\n      linkType = getDefaultCompletionType(node)?.completionType;\n    }\n\n    if (!linkType) {\n      continue;\n    }\n\n    if (linkType === 'directory') {\n      continue;\n    }\n\n    const range = createRange(document, node);\n\n    switch (linkType) {\n      case 'file': {\n        if (!isStringNode(node)) {\n          continue;\n        }\n\n        const fullPath = join(workingPath, node.value);\n        if (!(await fileExists(fullPath))) {\n          continue;\n        }\n\n        if (node.value === projectRoot) {\n          links.push({\n            range,\n            target: projectRootPath,\n          });\n        } else {\n          links.push(DocumentLink.create(range, fullPath));\n        }\n        break;\n      }\n      case 'target': {\n        const link = await targetLink(workingPath, node);\n        if (link) {\n          links.push(DocumentLink.create(range, link));\n        }\n        break;\n      }\n      default:\n    }\n  }\n\n  return links;\n}\n","import { parseTargetString } from '@nrwl/devkit/src/executors/parse-target-string';\nimport { fileExists, readFile } from '@nx-console/file-system';\nimport {\n  findProperty,\n  getLanguageModelCache,\n  isStringNode,\n  lspLogger,\n} from '@nx-console/language-server/utils';\nimport { nxWorkspace } from '@nx-console/workspace';\nimport { join } from 'path';\nimport {\n  ASTNode,\n  JSONDocument,\n  Range,\n  TextDocument,\n} from 'vscode-json-languageservice';\nimport { URI } from 'vscode-uri';\nimport { createRange } from './create-range';\n\nconst tempDocumentCounter = new Map<string, number>();\n\nexport async function targetLink(\n  workingPath: string,\n  node: ASTNode\n): Promise<string | undefined> {\n  if (!isStringNode(node)) {\n    return;\n  }\n\n  const targetString = node.value;\n  let project, target, configuration;\n  try {\n    const parsedTargets = parseTargetString(targetString);\n    project = parsedTargets.project;\n    target = parsedTargets.target;\n    configuration = parsedTargets.configuration;\n  } catch (e) {\n    return;\n  }\n\n  const { workspace } = await nxWorkspace(workingPath, lspLogger);\n\n  const workspaceProject = workspace.projects[project];\n\n  if (!workspaceProject) {\n    lspLogger.log(`Could not find project ${project}`);\n    return;\n  }\n\n  const baseTargetPath = join(workingPath, workspaceProject.root);\n  const baseTargetProjectPath = join(baseTargetPath, 'project.json');\n\n  if (!(await fileExists(baseTargetProjectPath))) {\n    lspLogger.log(`Could not find target project: ${baseTargetProjectPath}`);\n    return;\n  }\n\n  const projectJson = await readFile(baseTargetProjectPath);\n\n  let versionNumber = 0;\n  if (tempDocumentCounter.has(baseTargetProjectPath)) {\n    versionNumber = tempDocumentCounter.get(baseTargetProjectPath) ?? 0;\n    tempDocumentCounter.set(baseTargetProjectPath, versionNumber + 1);\n  } else {\n    tempDocumentCounter.set(baseTargetProjectPath, versionNumber);\n  }\n\n  const { document, jsonAst } = getLanguageModelCache().retrieve(\n    TextDocument.create(\n      baseTargetProjectPath,\n      'json',\n      versionNumber,\n      projectJson\n    ),\n    false\n  );\n\n  const range = findTargetRange(document, jsonAst, target, configuration);\n\n  if (!range) {\n    return;\n  }\n\n  return URI.from({\n    scheme: 'file',\n    path: baseTargetProjectPath,\n    fragment: `${range.start.line + 1}`,\n  }).toString();\n}\n\nfunction findTargetRange(\n  document: TextDocument,\n  jsonAst: JSONDocument,\n  target: string,\n  configuration: string | undefined\n): Range | undefined {\n  if (!jsonAst.root) {\n    return;\n  }\n\n  const targetNode = findProperty(jsonAst.root, 'targets');\n\n  if (!targetNode) {\n    return;\n  }\n\n  // Find the target within the target object\n  const targetProperty = findProperty(targetNode, target);\n\n  if (!targetProperty) {\n    return;\n  }\n\n  if (configuration) {\n    const configurationNode = findProperty(targetProperty, configuration);\n\n    if (configurationNode) {\n      return createRange(document, configurationNode);\n    }\n  } else {\n    return createRange(document, targetProperty);\n  }\n}\n","import { CompletionType } from '@nx-console/json-schema';\nimport { ASTNode } from 'vscode-json-languageservice';\nimport { isPropertyNode, isStringNode } from './node-types';\n\ntype DefaultCompletion = { glob?: string; completionType: CompletionType };\n\nconst defaultCompletionMap = new Map<string, DefaultCompletion>();\n\ndefaultCompletionMap.set('jestconfig', {\n  glob: 'jest.config.@(js|ts)',\n  completionType: 'file',\n});\ndefaultCompletionMap.set('index', {\n  glob: '*.html',\n  completionType: 'file',\n});\ndefaultCompletionMap.set('polyfills', {\n  glob: '*.ts',\n  completionType: 'file',\n});\ndefaultCompletionMap.set('main', {\n  glob: '*.ts',\n  completionType: 'file',\n});\ndefaultCompletionMap.set('tsconfig', {\n  glob: 'tsconfig.*.json',\n  completionType: 'file',\n});\ndefaultCompletionMap.set('outputpath', {\n  completionType: 'directory',\n});\ndefaultCompletionMap.set('browsertarget', {\n  completionType: 'target',\n});\ndefaultCompletionMap.set('servertarget', {\n  completionType: 'target',\n});\ndefaultCompletionMap.set('buildtarget', {\n  completionType: 'target',\n});\ndefaultCompletionMap.set('target', {\n  completionType: 'target',\n});\ndefaultCompletionMap.set('devservertarget', {\n  completionType: 'target',\n});\n\nexport function getDefaultCompletionType(\n  node: ASTNode\n): DefaultCompletion | undefined {\n  const parent = node.parent;\n  if (isPropertyNode(parent) && isStringNode(parent.keyNode)) {\n    const key = parent.keyNode.value.toLowerCase();\n    return defaultCompletionMap.get(key);\n  }\n\n  return undefined;\n}\n\nexport function hasDefaultCompletionType(node: ASTNode): boolean {\n  const parent = node.parent;\n  if (isPropertyNode(parent) && isStringNode(parent.keyNode)) {\n    const key = parent.keyNode.value.toLowerCase();\n    return defaultCompletionMap.has(key);\n  }\n\n  return false;\n}\n","import { ASTNode } from 'vscode-json-languageservice';\nimport { isObjectNode, isPropertyNode, isStringNode } from './node-types';\n\n/**\n * Get the first `root` property from the current node to determine `${projectRoot}`\n * @param node\n * @returns\n */\nexport function findProjectRoot(node: ASTNode): string {\n  if (isObjectNode(node)) {\n    for (const child of node.children) {\n      if (isPropertyNode(child)) {\n        if (\n          (child.keyNode.value === 'root' ||\n            child.keyNode.value === 'sourceRoot') &&\n          isStringNode(child.valueNode)\n        ) {\n          return child.valueNode?.value;\n        }\n      }\n    }\n  }\n\n  if (node.parent) {\n    return findProjectRoot(node.parent);\n  }\n\n  return '';\n}\n","import { ASTNode } from 'vscode-json-languageservice';\nimport { isObjectNode, isPropertyNode } from './node-types';\n\n/**\n * Find the first property from the current node\n * @param node\n * @param property\n */\nexport function findProperty(\n  node: ASTNode,\n  property: string\n): ASTNode | undefined {\n  if (isPropertyNode(node) && node.valueNode) {\n    node = node.valueNode;\n  }\n\n  if (isObjectNode(node)) {\n    for (const child of node.properties) {\n      if (child.keyNode.value === property) {\n        return child;\n      }\n\n      if (isObjectNode(child.valueNode)) {\n        const found = findProperty(child.valueNode, property);\n        if (found) {\n          return found;\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n","import {\n  getLanguageService,\n  LanguageService,\n  LanguageServiceParams,\n  LanguageSettings,\n} from 'vscode-json-languageservice';\n\nlet languageService: LanguageService | undefined;\n\nexport function configureJsonLanguageService(\n  params: LanguageServiceParams,\n  settings: LanguageSettings\n) {\n  if (languageService) {\n    throw 'Language service already configured';\n  }\n\n  languageService = getLanguageService(params);\n  languageService.configure(settings);\n}\n\nexport function getJsonLanguageService(): LanguageService {\n  if (!languageService) {\n    throw 'Language service not configured';\n  }\n\n  return languageService;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// https://github.com/microsoft/vscode/blob/89c30e1b86f941db095d9f52b128287e5039e004/extensions/json-language-features/server/src/languageModelCache.ts\n\nimport { JSONDocument } from 'vscode-json-languageservice';\nimport { TextDocument } from 'vscode-languageserver-textdocument';\nimport { getJsonLanguageService } from './json-language-service';\n\nexport interface LanguageModelCache<T> {\n  retrieve(\n    document: TextDocument,\n    stripSchema?: boolean\n  ): { jsonAst: T; document: TextDocument };\n  onDocumentRemoved(document: TextDocument): void;\n  dispose(): void;\n}\n\nconst parse = (document: TextDocument): JSONDocument =>\n  getJsonLanguageService().parseJSONDocument(document);\n\nlet languageModels: {\n  [uri: string]: {\n    version: number;\n    languageId: string;\n    cTime: number;\n    languageModel: JSONDocument;\n    document: TextDocument;\n  };\n} = {};\nconst maxEntries = 10;\nconst cleanupIntervalTimeInSec = 60;\nlet nModels = 0;\n\nlet cleanupInterval: NodeJS.Timer | undefined = undefined;\nif (cleanupIntervalTimeInSec > 0) {\n  cleanupInterval = setInterval(() => {\n    const cutoffTime = Date.now() - cleanupIntervalTimeInSec * 1000;\n    const uris = Object.keys(languageModels);\n    for (const uri of uris) {\n      const languageModelInfo = languageModels[uri];\n      if (languageModelInfo.cTime < cutoffTime) {\n        delete languageModels[uri];\n        nModels--;\n      }\n    }\n  }, cleanupIntervalTimeInSec * 1000);\n}\n\nexport function getLanguageModelCache(): LanguageModelCache<JSONDocument> {\n  return {\n    retrieve(\n      document: TextDocument,\n      stripSchema = true\n    ): {\n      jsonAst: JSONDocument;\n      document: TextDocument;\n    } {\n      const version = document.version;\n      const languageId = document.languageId;\n      const languageModelInfo = languageModels[document.uri];\n      if (\n        languageModelInfo &&\n        languageModelInfo.version === version &&\n        languageModelInfo.languageId === languageId\n      ) {\n        languageModelInfo.cTime = Date.now();\n        return {\n          jsonAst: languageModelInfo.languageModel,\n          document: languageModelInfo.document,\n        };\n      }\n\n      if (stripSchema) {\n        document = TextDocument.create(\n          document.uri,\n          document.languageId,\n          document.version,\n          document.getText().replace(/\"\\$schema\":\\s\".+\",/, '')\n        );\n      }\n\n      const languageModel = parse(document);\n\n      languageModels[document.uri] = {\n        languageModel,\n        version,\n        languageId,\n        document,\n        cTime: Date.now(),\n      };\n      if (!languageModelInfo) {\n        nModels++;\n      }\n\n      if (nModels === maxEntries) {\n        let oldestTime = Number.MAX_VALUE;\n        let oldestUri = null;\n        for (const uri in languageModels) {\n          const languageModelInfo = languageModels[uri];\n          if (languageModelInfo.cTime < oldestTime) {\n            oldestUri = uri;\n            oldestTime = languageModelInfo.cTime;\n          }\n        }\n        if (oldestUri) {\n          delete languageModels[oldestUri];\n          nModels--;\n        }\n      }\n      return { jsonAst: languageModel, document };\n    },\n    onDocumentRemoved(document: TextDocument) {\n      const uri = document.uri;\n      if (languageModels[uri]) {\n        delete languageModels[uri];\n        nModels--;\n      }\n    },\n    dispose() {\n      if (typeof cleanupInterval !== 'undefined') {\n        clearInterval(cleanupInterval);\n        cleanupInterval = undefined;\n        languageModels = {};\n        nModels = 0;\n      }\n    },\n  };\n}\n","import { Logger } from '@nx-console/schema';\nimport { Connection } from 'vscode-languageserver';\n\nlet log: Console['log'] | undefined;\n\nexport function setLspLogger(connection: Connection) {\n  if (!log) {\n    log = connection.console.log.bind(connection.console);\n  } else {\n    throw `Can't set logger twice`;\n  }\n}\n\nexport const lspLogger: Logger = {\n  log(message: string, ...args: any[]) {\n    log?.(message, ...args);\n  },\n};\n","/**\n * Combines the second array with the first array, without having to loop or change the reference of the first array.\n * @param arr1\n * @param arr2\n */\nexport function mergeArrays(arr1: Array<unknown>, arr2: Array<unknown>) {\n  Array.prototype.push.apply(arr1, arr2);\n}\n","import {\n  ASTNode,\n  ObjectASTNode,\n  PropertyASTNode,\n  StringASTNode,\n} from 'vscode-json-languageservice';\n\nexport function isPropertyNode(node?: ASTNode): node is PropertyASTNode {\n  return node?.type === 'property';\n}\n\nexport function isObjectNode(node?: ASTNode): node is ObjectASTNode {\n  return node?.type === 'object';\n}\n\nexport function isStringNode(node?: ASTNode): node is StringASTNode {\n  return node?.type === 'string';\n}\n","import {\n  xhr,\n  XHRResponse,\n  configure as configureHttpRequests,\n  getErrorStatusDescription,\n} from 'request-light';\nimport { URI } from 'vscode-uri';\nimport * as fs from 'fs';\nimport { Thenable } from 'vscode-json-languageservice';\n\nexport interface RequestService {\n  getContent(uri: string): Promise<string>;\n}\n\nfunction getHTTPRequestService(): RequestService {\n  return {\n    getContent(uri: string, _encoding?: string) {\n      const headers = { 'Accept-Encoding': 'gzip, deflate' };\n      return xhr({ url: uri, followRedirects: 5, headers }).then(\n        (response) => {\n          return response.responseText;\n        },\n        (error: XHRResponse) => {\n          return Promise.reject(\n            error.responseText ||\n              getErrorStatusDescription(error.status) ||\n              error.toString()\n          );\n        }\n      );\n    },\n  };\n}\n\nfunction getFileRequestService(): RequestService {\n  return {\n    getContent(location: string, encoding?: BufferEncoding) {\n      return new Promise((c, e) => {\n        const uri = URI.parse(location);\n        fs.readFile(uri.fsPath, encoding, (err, buf) => {\n          if (err) {\n            return e(err);\n          }\n          c(buf.toString());\n        });\n      });\n    },\n  };\n}\n\nexport function getSchemaRequestService(\n  handledSchemas: string[] = ['https', 'http', 'file']\n) {\n  const builtInHandlers: { [protocol: string]: RequestService | undefined } =\n    {};\n  for (const protocol of handledSchemas) {\n    if (protocol === 'file') {\n      builtInHandlers[protocol] = getFileRequestService();\n    } else if (protocol === 'http' || protocol === 'https') {\n      builtInHandlers[protocol] = getHTTPRequestService();\n    }\n  }\n  return (uri: string): Thenable<string> => {\n    const protocol = uri.substr(0, uri.indexOf(':'));\n\n    const builtInHandler = builtInHandlers[protocol];\n    if (builtInHandler) {\n      return builtInHandler.getContent(uri);\n    }\n    return Promise.reject('Unable to retrieve schema');\n  };\n}\n","export * from './lib/workspace-dependencies';\nexport * from './lib/find-nx-package-path';\nexport * from './lib/ng-version';\nexport * from './lib/nx-version';\nexport * from './lib/package-details';\n","import { join } from 'path';\nimport { fileExists } from '@nx-console/file-system';\nimport { workspaceDependencyPath } from './workspace-dependencies';\n\n/**\n * Finds the local Nx package in the workspace.\n *\n * It will try to look for the `nx` package, with the specific file. If it does not exist, it will try to look for the `@nrwl/workspace` package, with the specific file\n * @param workspacePath\n * @returns\n */\nexport async function findNxPackagePath(\n  workspacePath: string,\n  filePath: string\n): Promise<string | undefined> {\n  const buildPath = (base: string) => join(base, filePath);\n\n  const nxWorkspaceDepPath = await workspaceDependencyPath(workspacePath, 'nx');\n  if (nxWorkspaceDepPath) {\n    const path = buildPath(nxWorkspaceDepPath);\n    if (await fileExists(path)) {\n      return path;\n    }\n  }\n\n  const nrwlWorkspaceDepPath = await workspaceDependencyPath(\n    workspacePath,\n    '@nrwl/workspace'\n  );\n  if (nrwlWorkspaceDepPath) {\n    const path = buildPath(nrwlWorkspaceDepPath);\n    if (await fileExists(path)) {\n      return path;\n    }\n  }\n}\n","import { workspaceDependencyPath } from './workspace-dependencies';\n\ndeclare function __non_webpack_require__(importPath: string): any;\n\nlet ngPackageJson: { version: string };\nlet loadedNgPackage = false;\n\nexport async function ngVersion(workspacePath: string): Promise<number> {\n  if (!loadedNgPackage) {\n    const packagePath = await workspaceDependencyPath(\n      workspacePath,\n      '@angular/cli'\n    );\n\n    if (!packagePath) {\n      return 0;\n    }\n\n    ngPackageJson = __non_webpack_require__(packagePath + '/package.json');\n    loadedNgPackage = true;\n  }\n\n  if (!ngPackageJson) {\n    return 0;\n  }\n  const ngPackageVersion = ngPackageJson.version;\n  const majorVersion = ngPackageVersion.split('.')[0];\n  if (!majorVersion) {\n    return 0;\n  }\n  return +majorVersion;\n}\n","import { stat, readdir } from 'fs/promises';\nimport { join } from 'path';\n\n/**\n * Get a flat list of all node_modules folders in the workspace.\n * This is needed to continue to support Angular CLI projects.\n *\n * @param workspacePath\n * @returns\n */\nexport async function npmDependencies(workspacePath: string) {\n  const nodeModulesDir = join(workspacePath, 'node_modules');\n  const res: string[] = [];\n  const stats = await stat(nodeModulesDir);\n  if (!stats.isDirectory()) {\n    return res;\n  }\n\n  const dirContents = await readdir(nodeModulesDir);\n\n  for (const npmPackageOrScope of dirContents) {\n    if (npmPackageOrScope.startsWith('.')) {\n      continue;\n    }\n\n    const packageStats = await stat(join(nodeModulesDir, npmPackageOrScope));\n    if (!packageStats.isDirectory()) {\n      continue;\n    }\n\n    if (npmPackageOrScope.startsWith('@')) {\n      (await readdir(join(nodeModulesDir, npmPackageOrScope))).forEach((p) => {\n        res.push(`${nodeModulesDir}/${npmPackageOrScope}/${p}`);\n      });\n    } else {\n      res.push(`${nodeModulesDir}/${npmPackageOrScope}`);\n    }\n  }\n\n  return res;\n}\n","import { findNxPackagePath } from './find-nx-package-path';\n\ndeclare function __non_webpack_require__(importPath: string): any;\n\nlet nxWorkspacePackageJson: { version: string };\nlet loadedNxPackage = false;\nexport async function nxVersion(workspacePath: string): Promise<number> {\n  if (!loadedNxPackage) {\n    const packagePath = await findNxPackagePath(workspacePath, 'package.json');\n\n    if (!packagePath) {\n      return 0;\n    }\n\n    nxWorkspacePackageJson = __non_webpack_require__(packagePath);\n    loadedNxPackage = true;\n  }\n\n  if (!nxWorkspacePackageJson) {\n    return 0;\n  }\n  const nxPackageVersion = nxWorkspacePackageJson.version;\n  const majorVersion = nxPackageVersion.split('.')[0];\n  if (!majorVersion) {\n    return 0;\n  }\n  return +majorVersion;\n}\n","import { readAndCacheJsonFile } from '@nx-console/file-system';\nimport { join } from 'path';\n\nexport async function packageDetails(packagePath: string) {\n  const { json } = await readAndCacheJsonFile(\n    join(packagePath, 'package.json')\n  );\n  return {\n    packagePath,\n    packageName: json.name,\n    packageJson: json,\n  };\n}\n","import type { PnpApi } from '@yarnpkg/pnp';\nimport { join } from 'path';\nimport { fileExists } from '@nx-console/file-system';\ndeclare function __non_webpack_require__(importPath: string): any;\n\nlet PNP_API: PnpApi;\n\nasync function getPnpFile(workspacePath: string) {\n  const extensions = ['.cjs', '.js'];\n  for (const ext of extensions) {\n    try {\n      const fileName = `.pnp${ext}`;\n      const pnpFile = join(workspacePath, fileName);\n      if (await fileExists(pnpFile)) {\n        return pnpFile;\n      }\n    } catch {\n      return;\n    }\n  }\n}\n\nasync function pnpApi(workspacePath: string) {\n  const pnpFile = await getPnpFile(workspacePath);\n  if (!pnpFile) {\n    return;\n  }\n\n  if (!PNP_API) {\n    const pnp = __non_webpack_require__(pnpFile);\n    pnp.setup();\n    PNP_API = pnp;\n  }\n\n  return PNP_API;\n}\n\nexport async function isWorkspaceInPnp(workspacePath: string) {\n  try {\n    const file = await getPnpFile(workspacePath);\n    return !!file;\n  } catch {\n    return false;\n  }\n}\n\nexport async function pnpDependencies(workspacePath: string) {\n  const pnp = await pnpApi(workspacePath);\n\n  if (!pnp) {\n    return [];\n  }\n\n  pnp.resolveRequest;\n\n  const dependencies = [];\n  for (const locator of pnp.getDependencyTreeRoots()) {\n    const pkg = pnp.getPackageInformation(locator);\n    if (!pkg?.packageDependencies) {\n      continue;\n    }\n    for (const [name, reference] of pkg?.packageDependencies ?? {}) {\n      // Unmet peer dependencies\n      if (reference === null) continue;\n      if (!Array.isArray(reference) && reference.startsWith('workspace:'))\n        continue;\n\n      const path = await pnpDependencyPath(workspacePath, name);\n      if (path) {\n        dependencies.push(path);\n      }\n    }\n  }\n  return dependencies;\n}\n\nexport async function pnpDependencyPath(\n  workspacePath: string,\n  dependencyName: string\n) {\n  try {\n    const pnp = await pnpApi(workspacePath);\n\n    if (!pnp) {\n      return;\n    }\n\n    let path: string =\n      pnp.resolveToUnqualified(dependencyName, workspacePath + '/') ?? '';\n    if (path.includes('__virtual__')) {\n      path = pnp.resolveVirtual?.(path) ?? '';\n    }\n\n    return path;\n  } catch {\n    return;\n  }\n}\n","import { WorkspaceProjects } from '@nx-console/schema';\nimport { stat } from 'fs/promises';\nimport { join } from 'path';\nimport { npmDependencies } from './npm-dependencies';\nimport {\n  isWorkspaceInPnp,\n  pnpDependencies,\n  pnpDependencyPath,\n} from './pnp-dependencies';\nimport { directoryExists } from '@nx-console/file-system';\nimport { nxVersion } from './nx-version';\nimport { packageDetails } from './package-details';\n\n/**\n * Get dependencies for the current workspace.\n * This is needed to continue to support Angular CLI projects.\n *\n * @param workspacePath\n * @returns\n */\n\nexport async function workspaceDependencies(\n  workspacePath: string,\n  projects?: WorkspaceProjects\n): Promise<string[]> {\n  const dependencies: string[] = [];\n\n  dependencies.push(...(await localDependencies(workspacePath, projects)));\n\n  if (await isWorkspaceInPnp(workspacePath)) {\n    dependencies.push(...(await pnpDependencies(workspacePath)));\n  }\n\n  dependencies.push(...(await npmDependencies(workspacePath)));\n\n  return dependencies;\n}\n\nexport async function workspaceDependencyPath(\n  workspacePath: string,\n  workspaceDependencyName: string\n) {\n  if (workspaceDependencyName.startsWith('.')) {\n    return join(workspacePath, workspaceDependencyName);\n  }\n\n  if (await isWorkspaceInPnp(workspacePath)) {\n    return pnpDependencyPath(workspacePath, workspaceDependencyName);\n  }\n\n  const path = join(workspacePath, 'node_modules', workspaceDependencyName);\n  try {\n    return (await directoryExists(path)) ? path : undefined;\n  } catch {\n    return;\n  }\n}\n\nexport async function localDependencyPath(\n  workspacePath: string,\n  workspaceDependencyName: string,\n  projects: WorkspaceProjects\n): Promise<string | undefined> {\n  for (const project of Object.values(projects)) {\n    const projectPath = join(workspacePath, project.root);\n    const pkgDetails = await packageDetails(projectPath);\n    if (pkgDetails.packageName === workspaceDependencyName) {\n      return pkgDetails.packagePath;\n    }\n  }\n}\n\nasync function localDependencies(\n  workspacePath: string,\n  projects?: WorkspaceProjects\n): Promise<string[]> {\n  if (!projects) {\n    return [];\n  }\n\n  // Local plugins do not work with nxVersion less than 13\n  if ((await nxVersion(workspacePath)) < 13) {\n    return [];\n  }\n\n  const packages = Object.values(projects).map(\n    (project) => `${workspacePath}/${project.root}/package.json`\n  );\n\n  const existingPackages: string[] = [];\n\n  for (const pkg of packages) {\n    try {\n      const fileStat = await stat(pkg);\n      if (fileStat.isFile()) {\n        existingPackages.push(pkg.replace('/package.json', ''));\n      }\n    } catch {\n      // noop\n    }\n  }\n\n  return existingPackages;\n}\n","import { ProjectsConfigurations } from '@nrwl/devkit';\nimport { Schema } from 'nx/src/utils/params';\n\nexport enum OptionType {\n  Any = 'any',\n  Array = 'array',\n  Boolean = 'boolean',\n  Number = 'number',\n  String = 'string',\n}\n\nexport type OptionPropertyDescription = Schema['properties'][number];\n\nexport type CliOption = {\n  name: string;\n  originalName?: string;\n  positional?: number;\n  alias?: string;\n  hidden?: boolean;\n  deprecated?: boolean | string;\n} & OptionPropertyDescription;\n\nexport interface Option extends CliOption {\n  tooltip?: string;\n  itemTooltips?: ItemTooltips;\n  items?: string[] | ItemsWithEnum;\n  aliases: string[];\n  isRequired: boolean;\n  'x-dropdown'?: 'projects';\n}\n\nexport interface ItemTooltips {\n  [itemValue: string]: string;\n}\n\nexport interface ItemsWithEnum {\n  enum: string[];\n  type: OptionType;\n}\n\nexport type XPrompt = string | LongFormXPrompt;\nexport interface LongFormXPrompt {\n  message: string;\n  type: 'confirmation' | 'input' | 'list' | string;\n  multiselect?: boolean;\n  items?: (string | OptionItemLabelValue)[];\n}\n\nexport interface OptionItemLabelValue {\n  label: string;\n  value: string;\n}\n\nexport interface TaskExecutionMessage {\n  command: string;\n  positional: string;\n  flags: string[];\n}\n\nexport interface TaskExecutionSchema {\n  name: string;\n  command: string;\n  positional: string;\n  cliName: 'nx' | 'ng';\n  builder?: string;\n  description: string;\n  configurations?: TargetConfiguration[];\n  options: Option[];\n  contextValues?: {\n    path?: string;\n    directory?: string;\n    project?: string;\n    projectName?: string;\n  };\n}\n\nexport interface CollectionInfo {\n  name: string;\n  path: string;\n  type: 'executor' | 'generator';\n  data?: Generator;\n}\n\nexport enum GeneratorType {\n  Application = 'application',\n  Library = 'library',\n  Other = 'other',\n}\n\nexport interface Generator {\n  collection: string;\n  name: string;\n  description: string;\n  options?: Option[];\n  type: GeneratorType;\n}\n\nexport interface DefaultValue {\n  name: string;\n  defaultValue: string | undefined;\n}\n\nexport interface TargetConfiguration {\n  name: string;\n  defaultValues: DefaultValue[];\n}\n\nexport interface Targets {\n  name: string;\n  project: string;\n  builder: string;\n  description: string;\n  configurations: TargetConfiguration[];\n  options: CliOption[];\n}\n\nexport const WORKSPACE_GENERATOR_NAME_REGEX =\n  /^workspace-(schematic|generator):(.+)/;\n\nexport type WorkspaceProjects = ProjectsConfigurations['projects'];\n\nexport type { Store } from './store';\n\nexport interface Logger {\n  log(message: string): void;\n}\n","export { toWorkspaceFormat } from './lib/utils';\nexport { buildProjectPath } from './lib/build-project-path';\nexport { findConfig } from './lib/find-config';\nexport { checkIsNxWorkspace } from './lib/check-is-nx-workspace';\nexport * from './lib/utils';\n","import { join } from 'path';\nimport { fileExists } from '@nx-console/file-system';\n\n/**\n * Builds the project path from the given project name.\n * @param workspacePath The full path to the configured workspace\n * @param projectPath The path to the project relative to the workspace\n * @returns The full path to the project.json file\n */\nexport async function buildProjectPath(\n  workspacePath: string,\n  projectPath: string\n): Promise<string | undefined> {\n  const basePath = join(workspacePath, projectPath);\n\n  const projectJsonPath = join(basePath, 'project.json');\n  const packageJsonPath = join(basePath, 'package.json');\n  if (await fileExists(projectJsonPath)) {\n    return projectJsonPath;\n  } else if (await fileExists(packageJsonPath)) {\n    return packageJsonPath;\n  }\n}\n","import { join } from 'path';\nimport { fileExists, readAndCacheJsonFile } from '@nx-console/file-system';\n\nexport async function checkIsNxWorkspace(\n  workspacePath: string\n): Promise<boolean> {\n  let isNxWorkspace = await fileExists(join(workspacePath, 'nx.json'));\n\n  if (!isNxWorkspace) {\n    const lerna = await readAndCacheJsonFile('lerna.json', workspacePath);\n    isNxWorkspace = lerna.json.useNx ?? false;\n  }\n\n  return isNxWorkspace;\n}\n","import { dirname, join } from 'path';\nimport { fileExists } from '@nx-console/file-system';\n\nexport async function forEachAncestorDirectory(\n  directory: string,\n  callback: (directory: string) => Promise<string | undefined>\n): Promise<string | undefined> {\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const result = await callback(directory);\n    if (result !== undefined) {\n      return result;\n    }\n\n    const parentPath = dirname(directory);\n    if (parentPath === directory) {\n      return undefined;\n    }\n\n    directory = parentPath;\n  }\n}\n\nexport async function findConfig(\n  searchPath: string,\n  configName: string\n): Promise<string | undefined> {\n  return forEachAncestorDirectory(searchPath, async (ancestor) => {\n    const fileName = join(ancestor, configName);\n    try {\n      if (await fileExists(fileName)) {\n        return fileName;\n      }\n    } catch (e) {\n      return undefined;\n    }\n  });\n}\n","import type {\n  NxJsonConfiguration,\n  WorkspaceJsonConfiguration,\n} from '@nrwl/devkit';\nimport { toNewFormat } from 'nx/src/config/workspaces';\n\nexport function getPrimitiveValue(value: any): string | undefined {\n  if (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean'\n  ) {\n    return value.toString();\n  } else {\n    return undefined;\n  }\n}\n\nexport function toWorkspaceFormat(\n  w: any\n): WorkspaceJsonConfiguration & NxJsonConfiguration {\n  const newFormat = toNewFormat(w) as WorkspaceJsonConfiguration &\n    NxJsonConfiguration;\n  const sortedProjects = Object.entries(newFormat.projects || {}).sort(\n    (projectA, projectB) => projectA[0].localeCompare(projectB[0])\n  );\n  newFormat.projects = Object.fromEntries(sortedProjects);\n  return newFormat;\n}\n\nexport function hasKey<T>(obj: T, key: PropertyKey): key is keyof T {\n  return key in obj;\n}\n","import type {\n  NxJsonConfiguration,\n  ProjectGraph,\n  ProjectsConfigurations,\n} from '@nrwl/devkit';\nimport { join } from 'path';\nimport {\n  getNxProjectGraph,\n  getNxWorkspacePackageFileUtils,\n} from './get-nx-workspace-package';\nimport { readAndCacheJsonFile } from '@nx-console/file-system';\nimport { nxVersion } from '@nx-console/npm';\nimport { Logger } from '@nx-console/schema';\n\nexport type NxWorkspaceConfiguration = ProjectsConfigurations &\n  NxJsonConfiguration;\n\n/**\n * There's a couple things that we need to handle here.\n *\n * 1. We need to check if the installed version of Nx is lower than 12. If that's the case then we need to just read the configurations like we used to do before. We need to do this because when we fallback to the Nx utils that are bundled with the extension, they throw errors when a workspace is lower than 13 :(\n * 2. If there is no version returned, then Nx isn't installed and we need to just use the nx utils to handle pure angular.json\n * 3. Otherwise get the nx utils and get the configuration\n * 4. Catch any errors and return the old way of reading the configuration\n *\n */\nexport async function getNxWorkspaceConfig(\n  workspacePath: string,\n  format: 'nx' | 'angularCli',\n  isNxWorkspace: boolean,\n  logger: Logger\n): Promise<{\n  workspaceConfiguration: NxWorkspaceConfiguration;\n  configPath: string;\n}> {\n  const version = await nxVersion(workspacePath);\n\n  if (version < 12) {\n    return readWorkspaceConfigs(format, workspacePath);\n  }\n\n  try {\n    const [nxWorkspacePackage, nxProjectGraph] = await Promise.all([\n      getNxWorkspacePackageFileUtils(workspacePath, logger),\n      getNxProjectGraph(workspacePath, logger),\n    ]);\n    const configFile = nxWorkspacePackage.workspaceFileName();\n\n    let workspaceConfiguration: NxWorkspaceConfiguration;\n    try {\n      workspaceConfiguration = nxWorkspacePackage.readWorkspaceConfig({\n        format,\n        path: workspacePath,\n      });\n    } catch {\n      workspaceConfiguration = (\n        await readWorkspaceConfigs(format, workspacePath)\n      ).workspaceConfiguration;\n    }\n\n    let projectGraph: ProjectGraph | null = null;\n    try {\n      if (!isNxWorkspace) {\n        throw 'No project graph support';\n      }\n\n      if (version < 13) {\n        projectGraph = (nxProjectGraph as any).createProjectGraph();\n      } else {\n        projectGraph = await nxProjectGraph.createProjectGraphAsync();\n      }\n    } catch {\n      //noop\n    }\n\n    addProjectTargets(workspaceConfiguration, projectGraph);\n\n    return {\n      workspaceConfiguration,\n      configPath: join(workspacePath, configFile),\n    };\n  } catch (e) {\n    return readWorkspaceConfigs(format, workspacePath);\n  }\n}\n\nasync function readWorkspaceConfigs(\n  format: 'nx' | 'angularCli',\n  basedir: string\n) {\n  let workspaceJson: ProjectsConfigurations;\n  if (format === 'nx') {\n    workspaceJson = (await readAndCacheJsonFile('workspace.json', basedir))\n      .json;\n  } else {\n    workspaceJson = (await readAndCacheJsonFile('angular.json', basedir)).json;\n  }\n\n  const nxJson: NxJsonConfiguration = (\n    await readAndCacheJsonFile('nx.json', basedir)\n  ).json;\n  return {\n    workspaceConfiguration: {\n      ...workspaceJson,\n      ...nxJson,\n      projects: {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ...((nxJson as any).projects ?? {}),\n        ...workspaceJson.projects,\n      },\n    },\n    configPath:\n      format === 'nx'\n        ? join(basedir, 'workspace.json')\n        : join(basedir, 'angular.json'),\n  };\n}\n\nfunction addProjectTargets(\n  workspaceConfiguration: NxWorkspaceConfiguration,\n  projectGraph: ProjectGraph | null\n) {\n  if (!projectGraph) {\n    return;\n  }\n\n  for (const [projectName, node] of Object.entries(projectGraph.nodes)) {\n    const workspaceProject = workspaceConfiguration.projects[projectName];\n\n    if (!workspaceProject) {\n      // Certain versions of Nx will include npm, (or other third party dependencies) in the project graph nodes.\n      // These usually start with `npm:depname`\n      // We dont want to include them.\n      if (projectName.match(/:/)) {\n        continue;\n      }\n\n      workspaceConfiguration.projects[projectName] = {\n        root: node.data.root,\n        targets: node.data.targets ?? {},\n        name: projectName,\n        tags: node.data.tags ?? [],\n      };\n    } else {\n      workspaceConfiguration.projects[projectName] = {\n        ...workspaceProject,\n        targets: node.data.targets ?? {},\n      };\n    }\n  }\n}\n","// import { getOutputChannel } from '@nx-console/utils';\nimport type * as NxFileUtils from 'nx/src/project-graph/file-utils';\nimport type * as NxProjectGraph from 'nx/src/project-graph/project-graph';\nimport { platform } from 'os';\nimport { join } from 'path';\nimport { findNxPackagePath } from '@nx-console/npm';\nimport { Logger } from '@nx-console/schema';\n\ndeclare function __non_webpack_require__(importPath: string): any;\n\nlet RESOLVED_FILEUTILS_IMPORT: typeof NxFileUtils;\nlet RESOLVED_PROJECTGRAPH_IMPORT: typeof NxProjectGraph;\n\nexport async function getNxProjectGraph(\n  workspacePath: string,\n  logger: Logger\n): Promise<typeof NxProjectGraph> {\n  if (RESOLVED_PROJECTGRAPH_IMPORT) {\n    return RESOLVED_PROJECTGRAPH_IMPORT;\n  }\n\n  let importPath = await findNxPackagePath(\n    workspacePath,\n    join('src', 'project-graph', 'project-graph.js')\n  );\n\n  if (!importPath) {\n    importPath = await findNxPackagePath(\n      workspacePath,\n      join('src', 'core', 'project-graph', 'project-graph.js')\n    );\n  }\n\n  const nxProjectGraph = await import('nx/src/project-graph/project-graph');\n  return getNxPackage(\n    importPath,\n    nxProjectGraph,\n    RESOLVED_PROJECTGRAPH_IMPORT,\n    logger\n  );\n}\n\n/**\n * Get the local installed version of @nrwl/workspace\n */\nexport async function getNxWorkspacePackageFileUtils(\n  workspacePath: string,\n  logger: Logger\n): Promise<typeof NxFileUtils> {\n  if (RESOLVED_FILEUTILS_IMPORT) {\n    return RESOLVED_FILEUTILS_IMPORT;\n  }\n\n  let importPath = await findNxPackagePath(\n    workspacePath,\n    join('src', 'project-graph', 'file-utils.js')\n  );\n\n  if (!importPath) {\n    importPath = await findNxPackagePath(\n      workspacePath,\n      join('src', 'core', 'file-utils.js')\n    );\n  }\n\n  const nxFileUtils = await import('nx/src/project-graph/file-utils');\n  return getNxPackage(\n    importPath,\n    nxFileUtils,\n    RESOLVED_FILEUTILS_IMPORT,\n    logger\n  );\n}\n\nasync function getNxPackage<T>(\n  importPath: string | undefined,\n  backupPackage: T,\n  cache: T,\n  logger: Logger\n): Promise<T> {\n  try {\n    if (!importPath) {\n      throw 'local Nx dependency not found';\n    }\n\n    if (platform() === 'win32') {\n      importPath = importPath.replace(/\\\\/g, '/');\n    }\n\n    const imported = __non_webpack_require__(importPath);\n\n    logger?.log(`Using local Nx package at ${importPath}`);\n\n    cache = imported;\n    return imported;\n  } catch (error) {\n    logger?.log(\n      `Unable to load the ${importPath} dependency from the workspace. Falling back to extension dependency\n${error}\n    `\n    );\n    cache = backupPackage;\n    return backupPackage;\n  }\n}\n","import { checkIsNxWorkspace, toWorkspaceFormat } from '@nx-console/utils';\n\nimport { clearJsonCache, fileExists } from '@nx-console/file-system';\nimport { Logger } from '@nx-console/schema';\nimport { join } from 'path';\nimport {\n  firstValueFrom,\n  from,\n  iif,\n  of,\n  ReplaySubject,\n  switchMap,\n  tap,\n} from 'rxjs';\nimport {\n  getNxWorkspaceConfig,\n  NxWorkspaceConfiguration,\n} from './get-nx-workspace-config';\n\ninterface NxWorkspace {\n  validWorkspaceJson: boolean;\n  workspace: NxWorkspaceConfiguration;\n  workspaceType: 'ng' | 'nx';\n  configurationFilePath: string;\n  workspacePath: string;\n  isLerna: boolean;\n  workspaceLayout: {\n    appsDir: string;\n    libsDir: string;\n  };\n}\n\nconst enum Status {\n  not_started,\n  in_progress,\n  cached,\n}\n\nlet cachedReplay = new ReplaySubject<NxWorkspace>();\nlet status: Status = Status.not_started;\n\nexport async function nxWorkspace(\n  workspacePath: string,\n  logger: Logger = {\n    log(message) {\n      console.log(message);\n    },\n  },\n  reset?: boolean\n): Promise<NxWorkspace> {\n  if (reset) {\n    status = Status.not_started;\n    cachedReplay = new ReplaySubject<NxWorkspace>();\n    // Clear out the workspace config path, needed for angular or older nx workspaces\n    clearJsonCache('angular.json', workspacePath);\n    clearJsonCache('workspace.json', workspacePath);\n  }\n\n  return firstValueFrom(\n    iif(\n      () => status === Status.not_started,\n      of({}).pipe(\n        tap(() => {\n          status = Status.in_progress;\n        }),\n        switchMap(() => from(_workspace(workspacePath, logger))),\n        tap((workspace) => {\n          cachedReplay.next(workspace);\n          status = Status.cached;\n        })\n      ),\n      cachedReplay\n    )\n  );\n}\n\nasync function _workspace(\n  workspacePath: string,\n  logger: Logger\n): Promise<NxWorkspace> {\n  const isAngularWorkspace = await fileExists(\n    join(workspacePath, 'angular.json')\n  );\n  const isNxWorkspace = await checkIsNxWorkspace(workspacePath);\n  const config = await getNxWorkspaceConfig(\n    workspacePath,\n    isAngularWorkspace ? 'angularCli' : 'nx',\n    isNxWorkspace,\n    logger\n  );\n\n  const isLerna = await fileExists(join(workspacePath, 'lerna.json'));\n\n  try {\n    return {\n      validWorkspaceJson: true,\n      workspaceType: isAngularWorkspace ? 'ng' : 'nx',\n      workspace: toWorkspaceFormat(config.workspaceConfiguration),\n      configurationFilePath: config.configPath,\n      isLerna,\n      workspaceLayout: {\n        appsDir:\n          config.workspaceConfiguration.workspaceLayout?.appsDir ?? isLerna\n            ? 'packages'\n            : 'apps',\n        libsDir:\n          config.workspaceConfiguration.workspaceLayout?.libsDir ?? isLerna\n            ? 'packages'\n            : 'libs',\n      },\n      workspacePath,\n    };\n  } catch (e) {\n    const humanReadableError = 'Invalid workspace: ' + workspacePath;\n    logger?.log(humanReadableError);\n    const stringifiedError = e.toString ? e.toString() : JSON.stringify(e);\n    logger?.log(stringifiedError);\n\n    // Default to nx workspace\n    return {\n      validWorkspaceJson: false,\n      workspaceType: 'nx',\n      workspace: {\n        npmScope: '@nx-console',\n        projects: {},\n        version: 2,\n      },\n      configurationFilePath: '',\n      workspacePath,\n      isLerna: false,\n      workspaceLayout: {\n        appsDir: 'apps',\n        libsDir: 'libs',\n      },\n    };\n  }\n}\n","module.exports = require(\"@nrwl/devkit/src/executors/parse-target-string\");","module.exports = require(\"@yarnpkg/fslib\");","module.exports = require(\"@yarnpkg/libzip\");","module.exports = require(\"fast-glob\");","module.exports = require(\"jsonc-parser\");","module.exports = require(\"nx/src/config/workspaces\");","module.exports = require(\"nx/src/project-graph/file-utils\");","module.exports = require(\"nx/src/project-graph/project-graph\");","module.exports = require(\"request-light\");","module.exports = require(\"rxjs\");","module.exports = require(\"vscode-json-languageservice\");","module.exports = require(\"vscode-languageserver-textdocument\");","module.exports = require(\"vscode-languageserver/node\");","module.exports = require(\"vscode-uri\");","module.exports = require(\"fs\");","module.exports = require(\"fs/promises\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './global-polyfills';\n\nimport { getExecutors } from '@nx-console/collections';\nimport {\n  getProjectJsonSchema,\n  getWorkspaceJsonSchema,\n} from '@nx-console/json-schema';\nimport { getCompletionItems } from '@nx-console/language-server/capabilities/code-completion';\nimport { getDocumentLinks } from '@nx-console/language-server/capabilities/document-links';\nimport {\n  configureJsonLanguageService,\n  getJsonLanguageService,\n  getLanguageModelCache,\n  getSchemaRequestService,\n  lspLogger,\n  mergeArrays,\n  setLspLogger,\n} from '@nx-console/language-server/utils';\nimport { nxWorkspace } from '@nx-console/workspace';\nimport { CompletionList, TextDocument } from 'vscode-json-languageservice';\nimport {\n  createConnection,\n  InitializeResult,\n  ProposedFeatures,\n  ResponseError,\n  TextDocuments,\n  TextDocumentSyncKind,\n} from 'vscode-languageserver/node';\nimport { URI, Utils } from 'vscode-uri';\n\nlet WORKING_PATH: string | undefined = undefined;\n\nconst workspaceContext = {\n  resolveRelativePath: (relativePath: string, resource: string) => {\n    const base = resource.substring(0, resource.lastIndexOf('/') + 1);\n    return Utils.resolvePath(URI.parse(base), relativePath).toString();\n  },\n};\n\nconst connection = createConnection(ProposedFeatures.all);\n\n// Create a text document manager.\nconst documents = new TextDocuments(TextDocument);\n\n// Make the text document manager listen on the connection\n// for open, change and close text document events\ndocuments.listen(connection);\n\nconnection.onInitialize(async (params) => {\n  setLspLogger(connection);\n\n  const { workspacePath, projects } = params.initializationOptions ?? {};\n  try {\n    WORKING_PATH =\n      workspacePath ??\n      params.rootPath ??\n      URI.parse(params.rootUri ?? '').fsPath;\n\n    if (!WORKING_PATH) {\n      throw 'Unable to determine workspace path';\n    }\n\n    const collections = await getExecutors(WORKING_PATH, projects, false);\n    const workspaceSchema = getWorkspaceJsonSchema(collections);\n    const projectSchema = getProjectJsonSchema(collections);\n\n    configureJsonLanguageService(\n      {\n        schemaRequestService: getSchemaRequestService(['file']),\n        workspaceContext,\n        contributions: [],\n        clientCapabilities: params.capabilities,\n      },\n      {\n        schemas: [\n          {\n            uri: 'nx://schemas/workspace',\n            fileMatch: ['**/workspace.json', '**/angular.json'],\n            schema: workspaceSchema,\n          },\n          {\n            uri: 'nx://schemas/project',\n            fileMatch: ['**/project.json'],\n            schema: projectSchema,\n          },\n        ],\n      }\n    );\n  } catch (e) {\n    lspLogger.log('Unable to get Nx info: ' + e.toString());\n  }\n\n  const result: InitializeResult = {\n    capabilities: {\n      textDocumentSync: TextDocumentSyncKind.Incremental,\n      completionProvider: {\n        resolveProvider: false,\n        triggerCharacters: ['\"', ':'],\n      },\n      hoverProvider: true,\n      documentLinkProvider: {\n        resolveProvider: false,\n        workDoneProgress: false,\n      },\n    },\n  };\n\n  return result;\n});\n\nconnection.onCompletion(async (completionParams) => {\n  const changedDocument = documents.get(completionParams.textDocument.uri);\n  if (!changedDocument) {\n    return null;\n  }\n\n  const { jsonAst, document } = getJsonDocument(changedDocument);\n\n  const completionResults =\n    (await getJsonLanguageService().doComplete(\n      document,\n      completionParams.position,\n      jsonAst\n    )) ?? CompletionList.create([]);\n\n  const schemas =\n    (await getJsonLanguageService().getMatchingSchemas(document, jsonAst)) ??\n    [];\n\n  const pathItems = await getCompletionItems(\n    WORKING_PATH,\n    jsonAst,\n    document,\n    schemas,\n    completionParams.position\n  );\n  mergeArrays(completionResults.items, pathItems);\n\n  return completionResults;\n});\n\nconnection.onHover(async (hoverParams) => {\n  const hoverDocument = documents.get(hoverParams.textDocument.uri);\n\n  if (!hoverDocument) {\n    return null;\n  }\n\n  const { jsonAst, document } = getJsonDocument(hoverDocument);\n  return getJsonLanguageService().doHover(\n    document,\n    hoverParams.position,\n    jsonAst\n  );\n});\n\nconnection.onDocumentLinks(async (params) => {\n  const linkDocument = documents.get(params.textDocument.uri);\n\n  if (!linkDocument) {\n    return null;\n  }\n\n  const { jsonAst, document } = getJsonDocument(linkDocument);\n  const schemas =\n    (await getJsonLanguageService().getMatchingSchemas(document, jsonAst)) ??\n    [];\n\n  return getDocumentLinks(WORKING_PATH, jsonAst, document, schemas);\n});\n\nconst jsonDocumentMapper = getLanguageModelCache();\n\ndocuments.onDidClose((e) => {\n  jsonDocumentMapper.onDocumentRemoved(e.document);\n});\n\nconnection.onShutdown(() => {\n  jsonDocumentMapper.dispose();\n});\n\nconnection.onRequest('nx/workspace', async () => {\n  if (!WORKING_PATH) {\n    return new ResponseError(1000, 'Unable to get Nx info: no workspace path');\n  }\n\n  const workspace = await nxWorkspace(WORKING_PATH, lspLogger);\n\n  return workspace.workspace.projects;\n});\n\nfunction getJsonDocument(document: TextDocument) {\n  return jsonDocumentMapper.retrieve(document);\n}\n\nconnection.listen();\n"],"names":[],"sourceRoot":""}